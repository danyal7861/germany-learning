<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Meta information for character set and viewport settings -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Page title displayed on the browser tab -->
    <title>Rolsa Technologies - Green Energy Solutions</title>

    <!-- Bootstrap CSS - For responsive design and pre-built styling -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome - For adding icons to the webpage -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom CSS - Additional styling specific to your website -->
    <link rel="stylesheet" href="/css/styles.css">
    <!-- CSS for accessibility -->
    <style>
        :root {
            --primary-color: #2563eb;
            --text-color: #111827;
            --bg-color: #ffffff;
            --secondary-bg: #f3f4f6;
            --font-size-base: 16px;
            --line-height: 1.5;
            --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }

        body {
            font-family: var(--font-family);
            color: var(--text-color);
            background-color: var(--bg-color);
            line-height: var(--line-height);
            font-size: var(--font-size-base);
            margin: 0;
            padding: 0;
            transition: all 0.3s ease;
        }

        /* Accessibility classes that need to be available on all pages */
        .dark-mode {
            --text-color: #f9fafb;
            --bg-color: #111827;
            --secondary-bg: #1f2937;
        }

        .large-text {
            --font-size-base: 20px;
        }

        .high-contrast {
            --text-color: #ffffff;
            --bg-color: #000000;
            --primary-color: #ffff00;
        }

        .dyslexic-font {
            --font-family: 'OpenDyslexic', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }

        .reduced-motion {
            transition: none !important;
        }
    </style>
    
    <!-- Load accessibility settings script -->
    <script>
        // This script loads and applies accessibility settings from localStorage
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Loading accessibility settings on page load");
            
            try {
                // Check for saved settings
                const savedSettings = JSON.parse(localStorage.getItem('accessibilitySettings') || '{}');
                console.log("Found accessibility settings:", savedSettings);
                
                // Apply saved settings
                if (savedSettings.darkMode) {
                    document.body.classList.add('dark-mode');
                    console.log("Applied dark mode");
                }
                
                if (savedSettings.highContrast) {
                    document.body.classList.add('high-contrast');
                    console.log("Applied high contrast");
                }
                
                if (savedSettings.largeText) {
                    document.body.classList.add('large-text');
                    console.log("Applied large text");
                }
                
                if (savedSettings.dyslexicFont) {
                    document.body.classList.add('dyslexic-font');
                    console.log("Applied dyslexic font");
                }
                
                if (savedSettings.reduceMotion) {
                    document.body.classList.add('reduced-motion');
                    console.log("Applied reduced motion");
                }
                
                if (savedSettings.pauseAnimations) {
                    // Implementation for pausing animations would go here
                    console.log("Applied pause animations setting");
                }
                
                if (savedSettings.keyboardFocus) {
                    // Implementation for enhanced keyboard focus would go here
                    console.log("Applied keyboard focus setting");
                }
                
                if (savedSettings.extendedTime) {
                    // Implementation for extended time interactions would go here
                    console.log("Applied extended time setting");
                }
            } catch (error) {
                console.error("Error loading accessibility settings:", error);
            }
        });
    </script>
    <!-- Load accessibility settings script -->
</head>
<body class="d-flex flex-column min-vh-100">
    <!-- Including the Navbar for the webpage -->
    <%- include('navbar') %>
    
    <!-- Main content area -->
    <main class="flex-grow-1" style="padding-top: 80px;">
        <!-- Main content will be inserted here -->
    </main>

    <!-- Cookie Consent Banner -->
    <!-- Positioned at the bottom of the page, the banner asks users to accept or decline cookie usage -->
    <div id="cookieConsentBanner" class="position-fixed bottom-0 start-0 end-0 bg-dark text-white p-3 d-none">
        <div class="container">
            <div class="row align-items-center">
                <!-- Left side: Text explaining cookie usage -->
                <div class="col-lg-8">
                    <p class="mb-2 mb-lg-0">
                        <i class="fas fa-cookie-bite me-2"></i>
                        We use cookies to enhance your experience on our website and analyze site traffic. 
                        By clicking "Accept", you consent to our use of cookies.
                    </p>
                </div>
                
                <!-- Right side: Buttons to accept/decline cookies and a link to the cookie policy -->
                <div class="col-lg-4 text-lg-end">
                    <button id="acceptCookies" class="btn btn-success me-2">Accept</button>
                    <button id="declineCookies" class="btn btn-outline-light me-2">Decline</button>
                    <a href="/cookie-policy" class="btn btn-link text-white">Cookie Policy</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper for interactive elements (like dropdowns, modals) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Custom JavaScript for handling cookie consent -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check if cookie consent has been given previously
            if (!getCookie('cookieConsent')) {
                // If not, show the cookie consent banner
                document.getElementById('cookieConsentBanner').classList.remove('d-none');
            }

            // Handle the Accept button click event
            document.getElementById('acceptCookies').addEventListener('click', function() {
                setCookie('cookieConsent', 'accepted', 365); // Store the consent in cookies for 1 year
                document.getElementById('cookieConsentBanner').classList.add('d-none'); // Hide the banner
            });

            // Handle the Decline button click event
            document.getElementById('declineCookies').addEventListener('click', function() {
                setCookie('cookieConsent', 'declined', 365); // Store the decline in cookies for 1 year
                document.getElementById('cookieConsentBanner').classList.add('d-none'); // Hide the banner
            });

            // Function to set a cookie with a name, value, and expiration time
            function setCookie(name, value, days) {
                let expires = '';
                if (days) {
                    const date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); // Set expiration time
                    expires = '; expires=' + date.toUTCString(); // Format expiration date
                }
                // Set the cookie with the specified parameters
                document.cookie = name + '=' + (value || '') + expires + '; path=/';
            }

            // Function to get the value of a cookie by its name
            function getCookie(name) {
                const nameEQ = name + '='; // Cookie name equality check
                const ca = document.cookie.split(';'); // Split the cookies string into an array
                for (let i = 0; i < ca.length; i++) {
                    let c = ca[i];
                    while (c.charAt(0) === ' ') c = c.substring(1, c.length); // Remove leading spaces
                    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length); // Return the cookie value if found
                }
                return null; // Return null if the cookie isn't found
            }
        });
    </script>
</body>
</html>
